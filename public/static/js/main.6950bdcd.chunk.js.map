{"version":3,"sources":["queries/queries.js","components/BookDetails.jsx","components/BookList.jsx","components/AddBook.jsx","App.js","index.js"],"names":["getBooksQuery","gql","_templateObject","getAuthorsQuery","_templateObject2","addBookMutation","_templateObject3","getBookQuery","_templateObject4","BookDetails","book","this","props","data","react_default","a","createElement","name","genre","author","className","books","map","item","key","id","displayBookDetails","Component","graphql","options","variables","bookId","BookList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","selected","_this2","loading","onClick","e","setState","displayBooks","components_BookDetails","AddBook","authorId","disabled","authors","value","preventDefault","refetchQueries","query","action","onSubmit","submitForm","bind","type","onChange","target","displayAuthors","compose","client","ApolloClient","uri","App","react_apollo_browser_umd","components_BookList","components_AddBook","WebFont","load","google","families","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.6950bdcd.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\r\n\r\nconst getBooksQuery = gql`\r\n  {\r\n    books {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAuthorsQuery = gql`\r\n  {\r\n    authors {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst addBookMutation = gql`\r\n  mutation($name: String!, $genre: String!, $authorId: ID!) {\r\n    addBook(name: $name, genre: $genre, authorId: $authorId) {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getBookQuery = gql`\r\n  query($id: ID) {\r\n    book(id: $id) {\r\n      id\r\n      name\r\n      genre\r\n      author {\r\n        id\r\n        name\r\n        age\r\n        books {\r\n          name\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport { getBooksQuery, getAuthorsQuery, addBookMutation, getBookQuery };\r\n","import React, { Component } from \"react\";\r\nimport { graphql } from \"react-apollo\";\r\nimport { getBookQuery } from \"../queries/queries\";\r\n\r\nclass BookDetails extends Component {\r\n  displayBookDetails() {\r\n    const { book } = this.props.data;\r\n    if (book) {\r\n      return (\r\n        <div>\r\n          <h2>{book.name}</h2>\r\n          <p>{book.genre}</p>\r\n          <p>{book.author.name}</p>\r\n          <p>All books by this author</p>\r\n          <ul className=\"other-books\">\r\n            {book.author.books.map(item => {\r\n              return <li key={item.id}>{item.name}</li>;\r\n            })}\r\n          </ul>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div>No books selected...</div>;\r\n    }\r\n  }\r\n  render() {\r\n    return <div id=\"book-details\">{this.displayBookDetails()}</div>;\r\n  }\r\n}\r\n\r\n//  stores the data coming from getBookQuery in this component's props.\r\n//  so access the data using this.props.\r\nexport default graphql(getBookQuery, {\r\n  options: props => {\r\n    return { variables: { id: props.bookId } };\r\n  }\r\n})(BookDetails);\r\n","import React, { Component } from \"react\";\r\nimport { graphql } from \"react-apollo\";\r\n\r\nimport { getBooksQuery } from \"../queries/queries\";\r\nimport BookDetails from \"./BookDetails\";\r\n\r\nclass BookList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selected: null\r\n    };\r\n  }\r\n  displayBooks() {\r\n    let data = this.props.data;\r\n    if (data.loading) {\r\n      return <div>Loading Books.....</div>;\r\n    } else {\r\n      return data.books.map(book => {\r\n        return (\r\n          <li\r\n            key={book.id}\r\n            onClick={e => {\r\n              this.setState({ selected: book.id });\r\n            }}\r\n          >\r\n            {book.name}\r\n          </li>\r\n        );\r\n      });\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ul id=\"book-list\">{this.displayBooks()}</ul>\r\n        <BookDetails bookId={this.state.selected} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//  stores the data coming from getBooksQuery in this component's props.\r\n//  so access the data using this.props.\r\nexport default graphql(getBooksQuery)(BookList);\r\n","import React, { Component } from \"react\";\r\nimport { graphql, compose } from \"react-apollo\";\r\n\r\nimport {\r\n  getAuthorsQuery,\r\n  addBookMutation,\r\n  getBooksQuery\r\n} from \"../queries/queries\";\r\n\r\nclass AddBook extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      genre: \"\",\r\n      authorId: \"\"\r\n    };\r\n  }\r\n  displayAuthors() {\r\n    let data = this.props.getAuthorsQuery;\r\n    if (data.loading) {\r\n      return <option disabled>Loading Authors.....</option>;\r\n    } else {\r\n      return data.authors.map(author => {\r\n        return (\r\n          <option key={author.id} value={author.id}>\r\n            {author.name}\r\n          </option>\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  submitForm(e) {\r\n    //  prevent default behavior of refreshing the page on form submit\r\n    e.preventDefault();\r\n    this.props.addBookMutation({\r\n      variables: {\r\n        name: this.state.name,\r\n        genre: this.state.genre,\r\n        authorId: this.state.authorId\r\n      },\r\n      refetchQueries: [{ query: getBooksQuery }]\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <form action=\"\" onSubmit={this.submitForm.bind(this)}>\r\n        <div className=\"field\">\r\n          <label>Book name: </label>\r\n          <input\r\n            type=\"text\"\r\n            onChange={e => this.setState({ name: e.target.value })}\r\n          />\r\n        </div>\r\n        <div className=\"field\">\r\n          <label>Genre: </label>\r\n          <input\r\n            type=\"text\"\r\n            onChange={e => this.setState({ genre: e.target.value })}\r\n          />\r\n        </div>\r\n        <div className=\"field\">\r\n          <label>Author: </label>\r\n          <select onChange={e => this.setState({ authorId: e.target.value })}>\r\n            <option>Select Author</option>\r\n            {this.displayAuthors()}\r\n          </select>\r\n        </div>\r\n        <button>+</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n//  stores the data coming from getAuthorsQuery in this component's props.\r\n//  so access the data using this.props.\r\nexport default compose(\r\n  graphql(getAuthorsQuery, { name: \"getAuthorsQuery\" }),\r\n  graphql(addBookMutation, { name: \"addBookMutation\" })\r\n)(AddBook);\r\n","import React, { Component } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\n\n//  components\nimport BookList from \"./components/BookList\";\nimport AddBook from \"./components/AddBook\";\n//  apollo client setup\nconst client = new ApolloClient({ uri: \"http://localhost:5000/graphql\" });\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div id=\"main\">\n          <h1>Book App</h1>\n          <BookList />\n          <AddBook />\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport WebFont from \"webfontloader\";\n\nWebFont.load({\n  google: {\n    families: [\"Nunito\", \"sans-serif\"]\n  }\n});\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}